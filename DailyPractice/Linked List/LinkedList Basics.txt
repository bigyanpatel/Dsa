1. linked list is a non-continues data structure(advantage over arrays)

2. Disadvantage over arrays :-
        it takes 8 bytes to store 1 data unit in a nodes where as array is taking only 4bytes to store single unit of data.

3. we create two classes while creating linked list data structure
    - Node class
        - int data 
        - Node next
    - linkedlist class
        - Node head
        - Node tail
        - int size

4.  adding last in a linkedlist
    - void addLast(int val){
        if(size == 0){
            Node temp = new Node();
            temp.data = val;
            temp.next = null;
            head = tail = temp;
        } else{
            Node temp = new Node();
            temp.data = val;
            temp.next = null;
            tail.next = temp;
            tail = temp;
        }
        size++;
    }

5. displaying a linkedlist
    - public void display(){
        Node temp = head;
        while(temp != null){
            System.out.println(temp.data);
            temp = temp.next;
        }
    }

6. remove first element in a linkedlist
    - public void removeFirst(){
        if(size == 0){
            System.out.println("List is empty");
        } else if(size == 1){
            head = tail = null;
            size--;
        } else{
        head = head.next;
        size--;
        }
    }

7. get values in a linkedlist
    - public void getValues(int idx){
        if(size == 0){
            System.out.println("List is empty");
            return -1;
        } else if(idx < 0 || idx >= size){
            System.out.println("Invalid arguments");
        } else{
            Node temp = head;
            for(int i = 0; i < idx; i++){
                temp = temp.next;
            }
            return temp.data;
        }
    }

8.  add first in a linkedlist
    - public void addFirst(int val){
        Node temp = new Node();
        temp.data = val;
        temp.next = head;
        head = temp;
        if (size == 0){
            tail = temp;
        }
        size++;
    }

9. add at idx in a linkedlist
    - public void addAt(int idx, int val){
        if(idx < 0 || idx > size){
            System.out.println("Invalid arguments");
        } else if(size == 0){
            addFirst(val);
        } else if(idx == size){
            addLast(val);
        } else{
            Node node = new Node();
            Node temp = head;

            for(int i = 0; i < idx - 1; i++){
                temp = temp.next;
            }

            node.next = temp.next;
            temp.next = node;

            size++;
        }
    }

10. removelast from the linkedlist
    - public void removeLast(){
        if(size == 0){
        System.out.println("List is empty");
      } else if (size == 1){
        head = tail = null;
        size--;
      } else{
        Node temp = head;
        for(int i = 0; i < size - 2;  i++){
            temp = temp.next;
        }

        tail = temp;
        temp.next = null;
        size--;
      }
    }

11. reverse a linkedlist data iteratively
    - we will create two functions here

    - private Node getNodeAt(int idx){
        Node temp = head;
        for(int i = 0; i < idx; i++){
            temp = temp.next;
        }

        return temp;
    }

      public void reverseDI(){
          int li = 0;
          int ri = size - 1;

          while(li < ri){
              Node left = getNodeAt(li);
              Node right = getNodeAt(ri);

              int temp = left.data;
              left.data = right.data;
              right.data = temp;

              li++;
              ri--;
          }
      }

12. reverse a linkedlist pointer iterative method
    - public void reversePI(){
        Node prev = null;
        Node curr = head;

        while(curr != null){
            Node next = curr.next;

            curr.next = prev;

            prev = curr;
            curr = next;
        }

        Node temp = head;
        head = tail;
        tail = temp;
    }

13. remove at idx 
    - public void removeAt(int idx){
        if(idx < 0 || idx >= size){
            System.out.println("Invalid arguments");
        } else if(idx == 0){
            removeFirst();
        } else if(idx == size - 1){
            removeLast();
        } else{
            Node temp = head;
            for(int i = 0; i < idx - 1; i++){
                temp = temp.next;
            }

            temp.next = temp.next.next;
            size--;
        }
    }

14. kth node from last in a linkedlist
    - public void kthNodeFromLast(int k){
            Node s = head;
            Node f = head;

            for(int i = 0; i < k; i++){
                f = f.next;
            }

            while(f != tail){
                f = f.next;
                s = s.next;
            }
            return s.data;
    }

15. middle node of a linkedlist
    - public void middleNode(){
         Node s = head;
         Node f = head;

         while(f.next != null && f.next.next != null){
             s = s.next;
             f = f.next.next;
         }

         return s.data;
    }

16. mergeing two sorted array
    - public void mergeTwoSortedArray(linkedlist l1, linkedlist l2){
        Node one = l1.head;
        Node two = l2.head;

        LinkedList res = new linkedlist<>();    
        while(one != null && two != null){
            if(one.data < two.data){
                res.addLast(one.data);
                one = one.next;
            } else{
                res.addLast(two.data);
                two = two.next;
            }
        }

        while(one != null){
            res.addLast(two.data);
            two = two.next;
        }

        while(two != null){
            res.addLast(one.data);
            one = one.next;
        }

        return res;
    }

17. merge sort a LinkedList
    - public void mergeSort(Node head, Node tail)[
        if(head == tail){
            LinkedList br = new LinkedList();
            br.addLast(head.data);
            return br;
        }

        Node mid = middleNode(head, tail);
        LinkedList fsh = mergeSort(head, mid);
        LinkedList ssh = mergeSort(mid.next, tail);
        LinkedList cl = LinkedList.mergeTwoSortedArray(fsh, ssh);
        return cl;
    ]

18. removing duplicate in a LinkedList
    - public void removeDuplicates(){
         LinkedList res = new LinkedList();

         while(this.size() > 0){
             int val = this.getFirst();
             this.removeFirst();

             if(res.size() == 0 || res.tail.data != val){
                 res.addLast(val);
             }
         }

         this.head = res.head;
         this.tail = res.tail;
         this.size = res.size;
    }

19. sorting odd even LinkedList
    - public void oddEven(){
        LinkedList odd = new LinkedList();
        LinkedList even = new LinkedList();

        while(this.size > 0){
            int val = this.getFirst();
            this.removeFirst();
        
            if(val % 2 == 0){
            even.addLast(val);
            } else{
            odd.addLast(val);
            }
        }

        if(odd.size > 0 && even.size > 0){
            odd.tail.next = even.head;
            this.head = odd.head;
            this.tail = even.tail;
            this.size = odd.size + even.size;
        } else if(odd.size > 0){
            this.head = odd.head;
            this.tail = odd.tail;
            this.size = odd.size;
        } else if(eve.size > 0){
            this.head = even.head;
            this.tail = even.tail;
            this.size = even.size;
        }
    }

20. k reverse a LinkedList
    - public void kReverse(int k){
        LinkedList prev = null;


        while(this.size > 0){
            LinkedList curr = new LinkedList();

            if(this.size >= null){
                for(int i = 0; i < k; i++){
                    int val = this.getFirst();
                    this.removeFirst();
                    curr.addFirst();
                }
            } else{
                    int os = this.size;
                    for(int i = 0; i < os; i++){
                        int val = this.getFirst();
                        this.removeFirst();
                        curr.addLast(val);
                    }
                }

            if(prev == null){
                    prev = curr;
            } else{
                prev.tail.next = curr.head;
                prev.tail = curr.tail;
                prev.size += curr.size;
            }
        }

        this.head = prev.head;
        this.tail = prev.tail;
        this.size = prev.size;
    }

21. Display reverse LinkedList using recurssion
    - private void displayReverseHelper(Node node){
        if(node == null){
            return;
        }

        displayReverseHelper(node.next);
        System.out.println(node.data + " ");
    } 
    
    public void displayReverse(){
        displayReverseHelper(Head);
        System.out.println();
    }

22. reverse LinkedList using pointer-recussive
    - private void reversePRHelper(Node node){
        if(node == null){
            return;
        }
        reversePRHelper(node.next);

        if(node  == tail){
            // nothing to do here 
        } else {
            node.next.next = node;
        }
    }

    public void reversePR(){
        reversePRHelper(Head);
        head.next = null;
        Node temp = head;
        head = tail;
        tail = temp;
    }

23. reverse a LinkedList pointer recursive
    - private void reverseDRHelper(node right, int floor){
        if(right == null){
            return;
        }

        reverseDRHelper(right.next, floor + 1);

        if(floor >= size / 2) {
            int temp = right.data;
            right.data = rleft.data;
            rleft.data = temp;
        }

        rleft = rleft.next;
    }

    Node rleft;

    public void reverseDR(){
        rleft = head;
        reverseDRHelper(head, 0);
    }

24. is a LinkedList is palindrome
   - private boolean isPalindromeHelper(Node right){
       if(right == null){
           return true;
       }

       boolean rres = isPalindromeHelper(right.next);

       if(rres == false){
           return false;
       } else if(pleft.data != right.data){
           return false;
       } else {
           pleft = pleft.next;
           return true;
       }
   } 
   
   private boolean isPalindrome(){
        pleft = head;
        isPalindromeHelper(head);
    }

25. fold a LinkedList
    - private void foldHelper(Node right, int floor){
        if(right == null){
            return;
        }

        foldHelper(right.next, floor + 1);

        if(floor > size / 2){
            Node temp = fleft.next;
            fleft.next = right;
            right.next = temp;
            fleft.next = temp;
        } else if(floor == size / 2){
            tail = right;
            tail.next = null;
        }
    }
    
     Node fleft;
     public void fold(){
        fleft = head;
        folderHelper(head, 0);
    }

26. adding two LinkedList
    - public static int addListHelper(Node one, int pv1, Node two, int pv2, LinkedList res){
        int data = 0;
        if(pv1 > pv2){
            int oc = addListHelper(one.next, pv1 -1, two, pv2, res);
            int data = one.data + oc;
        }else if(pv2 > pv1){
            int oc = addListHelper(one, pv1, two.next, pv2 - 1, res);
            int data = two.data + oc;
        } else{
            int oc = addListHelper(one.next, pv1 -1, two.next, pv2 -1, res);
            int data = one.data + two.data + oc; 
        }

        int nd = data % 10;
        int nc = data / 10;

        res.addFirst(nd);
        return nc;
    }

    public static LinkedList addTwoLists(LinkedList one, LinkedList two){
        LinkedList res = new LinkedList();

        int oc = addListHelper(one.head, one.size, two.head, two.size, res);
        if(oc > 0){
            res.addFirst(oc);
        }

        return res;
    }

27. intersection of LinkedList
    - public static int findIntersection(LinkedList one, LinkedList two){
        Node t1 = one.head;
        Node t2 = two.head;

        int delta = Math.abs(one.size - two.size); 
        if(one.size > two.size){
            for(int i = 0; i < delta; i++){
                t1 = t1.next;
            }
        } else{
            for(int i = 0; i < delta; i++){
                t2 = t2.next;
            }
        }

        while(t1 != t2){
            t1 = t1.next;
            t2 = t2.next;
        }

        return t1.data;
    }